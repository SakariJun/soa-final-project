const { startSession } = require('mongoose');
const { validationResult } = require('express-validator');

const { _Department } = require('../models');

const {
    ID_DIGITS,
    SERVICE_USER,
    ROLE_NAME_LEADER,
    SERVICE_USER_EVENTS_SET_ROLE_BY_USER_ID,
    ROLE_NAME_EMPLOYEE,
} = require('../constants/global.constant');

const PublishServiceEvent = require('../utils/service-communicate.util');

const { createNewIDWithOutPrefix } = require('../utils/generate-prefix-id.util');

// Th√™m ph√≤ng ban m·ªõi
const createDepartment = async function ({ name, room, description }) {
    try {
        let maxCurrentID = await _Department.find().sort('-department_id').limit(1).lean();

        // N·∫øu ch∆∞a c√≥ ph√≤ng ban n√†o th√¨ m√£ ph√≤ng ban l√† PB00000
        if (maxCurrentID.length === 0) {
            // ID_DIGITS + 2 l√† ƒë·ªÉ sinh ra m√£ PB00000 v√¨ kh√¥ng + 2 s·∫Ω ra PB000
            maxCurrentID = 'PB'.padEnd(ID_DIGITS + 2, '0');
        } else {
            // N·∫øu ƒë√£ c√≥ ph√≤ng ban r·ªìi th√¨ l·∫•y PB + M√£ cao nh·∫•t hi·ªán t·∫°i
            // VD: PB00004
            maxCurrentID = maxCurrentID[0].department_id;
            maxCurrentID = 'PB' + maxCurrentID.substring(maxCurrentID.length - ID_DIGITS, maxCurrentID.length);
        }

        maxCurrentID = createNewIDWithOutPrefix(maxCurrentID);

        const department = await _Department.create({
            department_id: maxCurrentID,
            name,
            room,
            description,
        });

        if (!department) {
            return { status: false, message: 'T·∫°o ph√≤ng ban kh√¥ng th√†nh c√¥ng!' };
        }

        return { status: true, message: 'T·∫°o ph√≤ng ban th√†nh c√¥ng!', data: department };
    } catch (error) {
        console.error(error);
        return { status: false, message: error.message };
    }
};

const getAllDepartments = async function () {
    try {
        const departments = await _Department.find().select('-_id -__v').lean();

        return { status: true, message: 'L·∫•y danh s√°ch ph√≤ng ban th√†nh c√¥ng!', data: departments };
    } catch (error) {
        console.error(error);
        return { status: false, message: error.message };
    }
};

const getDepartmentDetail = async function ({ department_id }) {
    try {
        const department = await _Department.findOne({ department_id }).select('-_id -__v').lean();

        if (!department) {
            return { status: false, message: `Kh√¥ng t√¨m th·∫•y ph√≤ng ban v·ªõi m√£ ${department_id}!` };
        }

        return { status: true, message: 'Xem th√¥ng tin chi ti·∫øt ph√≤ng ban th√†nh c√¥ng!', data: department };
    } catch (error) {
        console.error(error);
        return { status: false, message: error.message };
    }
};

const updateDepartment = async function ({ department_id = '', name, room, description }) {
    try {
        const department = await _Department.findOne({ department_id });

        if (!department) {
            return { status: false, message: `Kh√¥ng t√¨m th·∫•y ph√≤ng ban v·ªõi m√£ ${department_id}!` };
        }

        department.name = name;
        department.room = room;
        department.description = description;

        await department.save();

        return { status: true, message: 'C·∫≠p nh·∫≠t th√¥ng tin ph√≤ng ban th√†nh c√¥ng!', data: department };
    } catch (error) {
        console.error(error);
        return { status: false, message: error.message };
    }
};

const deleteDepartment = async function ({ department_id = '' }) {
    try {
        const deletedDepartment = await _Department.deleteOne({ department_id }).lean();

        // TODO: G·ªçi service User ƒë·ªÉ set role c·ªßa tr∆∞·ªüng ph√≤ng v·ªÅ nh√¢n vi√™n
        // v√† c·∫≠p nh·∫≠t l·∫°i phognf ban cho t·∫•t c·∫£ nh√¢n vi√™n

        if (!deletedDepartment || deletedDepartment.deletedCount === 0) {
            return {
                status: false,
                message: `X√≥a ph√≤ng ban kh√¥ng th√†nh c√¥ng! Kh√¥ng t√¨m th·∫•y ph√≤ng ban v·ªõi m√£ ${department_id}`,
            };
        }

        return { status: true, message: 'X√≥a ph√≤ng ban th√†nh c√¥ng!', data: deletedDepartment };
    } catch (error) {
        console.error(error);
        return { status: false, message: error.message };
    }
};

const checkIsUserBelongToDepartment = function (user_id, department_id) {
    // L·∫•y ra m√£ ph√≤ng ban ·ªü v·ªã tr√≠ ƒë·∫ßu c·ªßa m√£ nh√¢n vi√™n

    try {
        const userDepartmentIndex = parseInt(user_id.substring(0, user_id.length - (ID_DIGITS + 2)));
        console.log(
            'üöÄ ~ file: department-management.service.js ~ line 127 ~ checkIsUserBelongToDepartment ~ userDepartmentIndex',
            userDepartmentIndex,
        );
        const departmentIndex = parseInt(
            department_id.substring(department_id.length - ID_DIGITS, department_id.length),
        );
        console.log(
            'üöÄ ~ file: department-management.service.js ~ line 131 ~ checkIsUserBelongToDepartment ~ departmentIndex',
            departmentIndex,
        );

        return userDepartmentIndex === departmentIndex;
    } catch (error) {
        console.error(error);
        return false;
    }
};

const assignLeaderDepartment = async function ({ leader_id, department_id }, isChange = false) {
    const session = await startSession();
    try {
        session.startTransaction();

        // Ki·ªÉm tra xem nh√¢n vi√™n c√≥ thu·ªôc ph√≤ng ban hay kh√¥ng
        if (!checkIsUserBelongToDepartment(leader_id, department_id)) {
            return { status: false, message: `Nh√¢n vi√™n ${leader_id} kh√¥ng thu·ªôc ph√≤ng ban ${department_id}!` };
        }

        // Ki·ªÉm tra ph√≤ng ban c√≥ t·ªìn t·∫°i hay ch∆∞a?
        const department = await _Department.findOne({ department_id }).session(session);

        if (!department) {
            await session.abortTransaction();
            return { status: false, message: `Kh√¥ng t√¨m th·∫•y ph√≤ng ban v·ªõi m√£ ${department_id}!` };
        }

        if (!isChange) {
            // Ki·ªÉm tra ph√≤ng ban ƒë√£ c√≥ tr∆∞·ªüng ph√≤ng hay ch∆∞a?
            if (department.leader_id !== null) {
                await session.abortTransaction();
                return {
                    status: false,
                    message: `Ph√≤ng ban ${department_id} ƒë√£ c√≥ tr∆∞·ªüng ph√≤ng l√† nh√¢n vi√™n ${department.leader_id}!`,
                };
            }
        }

        // Ki·ªÉm tra m√£ nh√¢n vi√™n v·ª´a nh·∫≠n c√≥ ph·∫£i l√† tr∆∞·ªüng ph√≤ng c·ªßa ph√≤ng ban n√†o ch∆∞a?
        const checkIsAlreadyLeader = await _Department.findOne({ leader_id }).session(session);

        if (checkIsAlreadyLeader) {
            return {
                status: false,
                message: `Nh√¢n vi√™n ${leader_id} ƒë√£ l√† tr∆∞·ªüng ph√≤ng c·ªßa ph√≤ng ban ${checkIsAlreadyLeader.department_id}`,
            };
        }

        // N·∫øu nh√¢n vi√™n hi·ªán t·∫°i ch∆∞a l√†m tr∆∞·ªüng ph√≤ng c·ªßa ph√≤ng ban n√†o
        // V√† ph√≤ng ban ch∆∞a c√≥ tr∆∞·ªüng ph√≤ng
        // th√¨ c·∫≠p nh·∫≠t tr∆∞·ªüng ph√≤ng c·ªßa ph√≤ng ban
        department.leader_id = leader_id;
        await department.save();

        // Sau khi t·∫°o ph√≤ng ban xong th√¨ g·ªçi sang User Service ƒë·ªÉ c·∫≠p nh·∫≠t role c·ªßa nh√¢n vi√™n
        const payload = {
            payload: {
                event: SERVICE_USER_EVENTS_SET_ROLE_BY_USER_ID,
                data: {
                    user_id: leader_id,
                    role_name: ROLE_NAME_LEADER,
                },
            },
        };

        let userServiceResponse = await PublishServiceEvent(payload, SERVICE_USER);

        // N·∫øu c·∫≠p nh·∫≠t role c·ªßa nh√¢n vi√™n th√†nh tr∆∞·ªüng ph√≤ng kh√¥ng th√†nh c√¥ng th√¨ abortTransaction
        if (userServiceResponse.statusText !== 'OK') {
            await session.abortTransaction();
            return userServiceResponse;
        }

        await session.commitTransaction();
        return { status: true, message: 'B·ªï nhi·ªám tr∆∞·ªüng ph√≤ng th√†nh c√¥ng!' };
    } catch (error) {
        console.error(error);
        await session.abortTransaction();
        return { status: false, message: error.message };
    } finally {
        await session.endSession();
    }
};

const changeLeaderDepartment = async function ({ leader_id, department_id }) {
    const session = await startSession();
    try {
        session.startTransaction();

        let department = await _Department.findOne({ department_id }).session(session);

        if (!department) {
            await session.abortTransaction();
            return {
                status: false,
                message: `Kh√¥ng t√¨m th·∫•y ph√≤ng ban v·ªõi m√£ ${department_id}`,
            };
        }

        // L∆∞u l·∫°i ID c·ªßa tr∆∞·ªüng ph√≤ng c≈©

        if (department.leader_id === null) {
            await session.abortTransaction();
            return {
                status: false,
                message: `Ph√≤ng ban ${department_id} hi·ªán ch∆∞a c√≥ tr∆∞·ªüng ph√≤ng! Kh√¥ng th·ªÉ thay th·∫ø!`,
            };
        }

        const oldLeaderID = department.leader_id;

        // C·∫≠p nh·∫≠t tr∆∞·ªüng ph√≤ng m·ªõi
        const assignNewLeaderResult = await assignLeaderDepartment({ leader_id, department_id }, true);

        if (!assignNewLeaderResult.status) {
            await session.abortTransaction();
            return assignNewLeaderResult;
        }

        // N·∫øu c·∫≠p nh·∫≠t tr∆∞·ªüng ph√≤ng m·ªõi th√†nh c√¥ng kh√¥ng l·ªói!
        // Th√¨ c·∫≠p nh·∫≠t l·∫°i ch·ª©c v·ª• c·ªßa tr∆∞·ªüng ph√≤ng c≈© v·ªÅ nh√¢n vi√™n
        const payload = {
            payload: {
                event: SERVICE_USER_EVENTS_SET_ROLE_BY_USER_ID,
                data: {
                    user_id: oldLeaderID,
                    role_name: ROLE_NAME_EMPLOYEE,
                },
            },
        };

        let userServiceResponse = await PublishServiceEvent(payload, SERVICE_USER);

        if (userServiceResponse.statusText !== 'OK') {
            await session.abortTransaction();
            return userServiceResponse;
        }

        await session.commitTransaction();
        return { status: true, message: `Thay ƒë·ªïi tr∆∞·ªüng ph√≤ng cho ph√≤ng ban ${department_id} th√†nh c√¥ng!` };
    } catch (error) {
        console.error(error);
        await session.abortTransaction();
        return { status: false, message: error.message };
    } finally {
        await session.endSession();
    }
};

//#region Validate
function validateWithoutCustom(req) {
    const validateResult = validationResult(req);

    if (!validateResult.isEmpty()) {
        return { status: false, message: validateResult.errors[0].msg };
    }

    return { status: true };
}

//#endregion

module.exports = {
    createDepartment,
    getAllDepartments,
    getDepartmentDetail,
    updateDepartment,
    deleteDepartment,

    assignLeaderDepartment,
    changeLeaderDepartment,

    validateWithoutCustom,
};
